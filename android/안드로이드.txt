액티비티의 생명주기(기한)
- 액티비티는 ui 와 가장 밀접한 관련을 갖기 때문에
사실상 안드로이드 앱에 있어서 기본이 되는 구성요소이다.

- 보통 앱은 하나 이상의 액티비티가 연결된 형태로 구성된다.
- 액티비티는 생명주기를 갖는다.

//////////////////////////////////////////////////////////////////////////////////

[생명주기 함수]
- onCreate() : Activity 가 생성되면 가장 먼저 호출되는 것
	- 최초로 앱을 실행하면 호출
	- 생명주기를 통틀어서 한번만 호출되는 메서드
	- Activity 최초 실행에 해야하는 작업을 수행하기 적당하다
	- 화면 Layout 정의 , View 생성 등은 이곳에서 한다.

- onStart() : 이 시점부터 사용자가 액티비티를 볼 수 있다.
	- 액티비티가 화면에 표시되기 직전에 호출
	- 화면에 진입할 때 마다 실행되어야 하는 작업을 이곳에 구현

- onResume() : 현재 액티비티가 사용자에게 포커스 in 되어있는 상태 (앱이 구동중인 상태?)

- on Pause() : 포커스를 잃은 상태가 되면 호출된다. ( 앱을 종료한것이 아니고 잠깐 다른 화면으로 넘어갔을때 )
	- 액티비티가 실행중인 상태에서 사용자와 상호작용이 불가능한 상태 
	- 다른 액티비티가 호출되기 전에 실행되기 때문에 무거운 작업을 수행하지 않도록 주의해야 한다
	- 영구적인 Data는 이곳에 저장


- on Stop() : 액티비티가 다른 액티비티에 의해 100% 가려질 때 호출되는 메서드
	- 홈 키를 누르는 경우 , 다른 액티비티로의 이동이 있는 경우
	- 이 상태에서 액티비티가 호출되면 onRestart()가 호출

- onDestroy() : 액티비티가 완전히 종료되었을 때 호출되는 메서드
	- finish() , onBackPressed() 가 호출되면 호출된다.
	- 메모리 부족일때 종료
	- onStop() , onDestroy() 메서드는 메모리 부족이 발생하면 스킵될 수 있다.

- onRestart() : onStop()이 호출된 이후에 다시 기존 액티비티로 돌아오는 경우에 호출되는 메서드
	- onRestart()가 호출 된 이후 이어서 onStart()가 호출됨




============================================================


- 자바에서는 Object가 최상위 클래스 였다면
- 안드로이드에서는 R 클래스가 최상위 이다



R클래스
- 안드로이드에는 R클래스가 객체를 static으로 제공한다
- R.java객체는 안드로이드 소스(레이아웃,이미지ㅡ문자열 등) 을 식별하기 위해 변수들을 관리한다
- 소스파일(java)에서 resource에 접근할 때 R클래스를 사용
- XML파일에서는 R클래스의 역할을 @가 대신한다


- 객체가 id를 부여받는 순간 R.java가 16진수의 정수형태로 값을 저장한다.
- 심지어 레이아웃을 만들때 조차 정수로 저장한다.
- 빌드 할때마다 그 값이 바뀐다.



//////////////////////////////////////////////////////////////////

Visibility속성
- 사용자와의 상호작용을 통해 View를 숨기거나 표시하고 싶을때 visibility 속성으로 해결한다
- visibility 속성은 View클래스에 정의되어 있으며 모든 View를 대상으로 사용할 수 있다.

속성의 종류

visible : 보임

invisible : 안보임 하지만 공간은차지

gone : 안보임 공간도 차지하지않는다



//////////////////////////////////////

Selector

- View의 각 상태의 drawable을 달리하여 효과를 줄 수 있는 방법
- background와 textColor 등 에 적용 할 수 있다.


- Selector 설정 파일을 만들어야한다
	drawable 폴더 - >  Drawavle ResourceFile 생성 (xml파일 생성됨)

속성
android:states_pressed : 뷰가 눌렸을 때 (터치나 클릭이 발생했을 때)

state_focused : 뷰에 포커스가 위치 했을 때 (ex : EidtText를 입력했을때)

state_selected : 뷰를 선택했을 때 ( 방향키로 이동하다가 선택했을때)

state_checkable : 체크 가능한 상태일 때 (chaeckbox를 체크할 수 있는 상태일때)

state_checked : 체크된 상태일 때



///////////////////////////////////
ActionBar 상단 오른쪽 더보기 메뉴 만들기

res 폴더 -> 새로운 폴더로 "menu" 를 만든다 (이름 고정)
	-> new -> Menu ResourceFile 생성


inflate 를 통해 레이아웃을 다른 레이아웃에 붙여야한다
setContentView();



public class MenuActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_menu);
    }


    @Override // 이메서드가 없으면 ActionBar 오른쪽위에 메뉴바가 활성화되지않는다
    public boolean onCreateOptionsMenu(Menu menu) {

        getMenuInflater().inflate(R.menu.my_menu,menu);

        return super.onCreateOptionsMenu(menu);
    }


    // 메뉴바 각 메뉴의 이벤트 처리를 위한 메서드
    // 매개변수인 item이 어떤 메뉴가 눌러졌는지 알 수 있다
    @Override 
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        int itemId = item.getItemId();
        
        if(itemId == R.id.menu1){
//            Toast.makeText(메뉴객체 , 텍스트 , 알림띄울 시간)
            Toast.makeText(MenuActivity.this,"앱 소개 누름",Toast.LENGTH_SHORT).show();
        } else if(itemId == R.id.menu2){
            Toast.makeText(MenuActivity.this,"이메일 누름",Toast.LENGTH_SHORT).show();
        }else {
            finish(); // 현재 띄워져있는 Activity 한개를 종료
        }

        return true;

    }
}








